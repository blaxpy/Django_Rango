from datetime import datetime
from io import BytesIO

from django.core.files.uploadedfile import InMemoryUploadedFile
from PIL import Image


def get_server_side_cookie(request, cookie, default_val=None):
    val = request.session.get(cookie)
    if not val:
        val = default_val
    return val


def visitor_cookie_handler(request):
    visits = int(get_server_side_cookie(request, 'visits', 1))

    last_visit_cookie = get_server_side_cookie(request, 'last_visit', str(datetime.now()))
    last_visit_datetime = datetime.strptime(last_visit_cookie, '%Y-%m-%d %H:%M:%S.%f')

    if (datetime.now() - last_visit_datetime).days > 0:
        visits = visits + 1
        request.session['last_visit'] = str(datetime.now())
    else:
        request.session['last_visit'] = last_visit_cookie

    request.session['visits'] = visits


def resize_image(img):
    """Resizes image to specified width while keeping original width/height ratio"""
    base_width = 200

    # Avoiding hardcoding image name by using autogenerated name
    img_name = img.name

    img = Image.open(img)

    # Get image format to later save it correctly
    img_format = img.format

    # Get relative multiplier
    width_ratio = (base_width / float(img.size[0]))
    # Change height using relative multiplier
    relative_height = int((float(img.size[1]) * float(width_ratio)))

    img = img.resize((base_width, relative_height), Image.LANCZOS)

    # Create byte output object
    output = BytesIO()

    img.save(output, format=img_format, quality=99)
    # output.seek(0)  # works without it

    # Save image as Django's InMemoryUploadedFile
    img = InMemoryUploadedFile(file=output, field_name='ImageField', name=img_name, content_type='image/jpeg',
                               size=output.tell(), charset=None)
    return img
